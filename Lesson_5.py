# -*- coding: utf-8 -*-
"""Копия 2.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ckpt4Wdw_gzuF8bpy46rIZ-2QijoOxzY
"""

from math import factorial
import numpy as np
import math
import statistics

print('Задание 1.')

# Известно, что генеральная совокупность распределена нормально
# со средним квадратическим отклонением, равным 16.
# Найти доверительный интервал для оценки математического ожидания a с надежностью
# 0.95, если выборочная средняя M = 80, а объем выборки n = 256.

S = 16

M = 80

n = 256

Zt = 1.96

def z(a, b, c):
  return (a * b) / np.sqrt(c)

z = z(Zt, S, n)

def interval(a, b):
  gap = []
  lower_edge = a - b
  higher_edge = a + b
  gap.append(lower_edge)
  gap.append(higher_edge)
  return gap

interval = interval(M, z)

print(f'Доверительный интервал {interval}')

print('Задание 2.')

# В результате 10 независимых измерений некоторой величины X, выполненных с
# одинаковой точностью, получены опытные данные:
# 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения
# вероятностей, оценить истинное значение величины X при помощи доверительного
# интервала, покрывающего это значение с доверительной вероятностью 0,95.

X = [6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]

n = 10

M = np.mean(X)

D = np.std(X)

Zt = 2.262

def z(a, b, c):
  return (a * b) / np.sqrt(c)

zc = z(Zt, D, n)

def interval(a, b):
  gap = []
  lower_edge = a - b
  higher_edge = a + b
  gap.append(lower_edge)
  gap.append(higher_edge)
  return gap

interval = interval(M, zc)

print('Доверительный интервал', ["{:.3f}".format(i) for i in interval])

print('Задание 3.')

# Утверждается, что шарики для подшипников, изготовленные автоматическим станком,
# имеют средний диаметр 17 мм. Используя односторонний критерий с α=0,05, проверить
# эту гипотезу, если в выборке из n=100 шариков средний диаметр оказался равным
# 17.5 мм, а дисперсия известна и равна 4 кв. мм.

Mx = 17

Mn = 17.5

Dx = 4

Stdx = 2

n = 100

Zt = 1.65

def z(a, b, c, d):
  return (a - b) / (c * np.sqrt(d))

Zc = z(Mn, Mx, Stdx, n)

if Zt < Zc:
  print('Генеральная гипотеза верна')
else:
  print('Генеральная гипотеза ложна')

print('Задание 4.')

# Продавец утверждает, что средний вес пачки печенья составляет 200 г.
# Из партии извлечена выборка из 10 пачек. Вес каждой пачки составляет:
# 202, 203, 199, 197, 195, 201, 200, 204, 194, 190.
# Известно, что их веса распределены нормально.
# Верно ли утверждение продавца, если учитывать, что доверительная вероятность равна 99%?

X = [202, 203, 199, 197, 195, 201, 200, 204, 194, 190]

M = 200

n = 10

Mn = np.mean(X)

Stdx = np.std(X)

Zt = 3.25

def z(a, b, c, d):
  return ((a - b) * np.sqrt(d)) / c

Zc = z(Mn, M, Stdx, n)

if abs(Zt) > abs(Zc):
  print('Генеральная гипотеза верна')
else:
  print('Генеральная гипотеза ложна')